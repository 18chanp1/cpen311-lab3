KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
04Jun2023-16:01:47

 Addr Code

 000                                 ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                                 ; one second intervals.
 000                                 ;
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Port definitions
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 CONSTANT LED_port, 80                ;8 simple LEDs. Is an OUTPUT port.
 000                                 CONSTANT DATA_IN_PORT, 00            ;input data port. this is an INPUT port.
 000                                 CONSTANT SSEG_PORT0, 40
 000                                 CONSTANT SSEG_PORT1, 20
 000                                 CONSTANT SSEG_PORT2, 10
 000                                 ;**************************************************************************************
 000                                 ; Special Register usage
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ; No registers are given special names in this program.
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Scratch Pad Memory Locations
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ;
 000                                 CONSTANT ISR_preserve_s0, 00         ;Preserve s0 contents during ISR
 000                                 CONSTANT ISR_preserve_s1, 01         ;Preserve s1 contents during ISR
 000                                 CONSTANT ISR_preserve_s2, 02         ;Preserve s2 contents during ISR
 000                                 CONSTANT ISR_preserve_s3, 03         ;Preserve s3 contents during ISR
 000                                 ;
 000                                 CONSTANT LED_pattern, 04             ;remember state of LEDs (8-bit counter in this case)
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Useful data constants
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ;
 000                                 ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                                 ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                                 ; calculation highly predictable. The '6' in the following equation even allows for
 000                                 ; 'CALL delay_1us' instruction in the initiating code.
 000                                 ;
 000                                 ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                                 ;
 000                                 ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
 000                                 ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                                 ; become lower than intended. Interrupts may effect the timing of software based
 000                                 ; delays.
 000                                 ;
 000                                 CONSTANT delay_1us_constant, 0B
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ; ASCII table
 000                                 ;
 000                                 CONSTANT character_a, 61
 000                                 CONSTANT character_b, 62
 000                                 CONSTANT character_c, 63
 000                                 CONSTANT character_d, 64
 000                                 CONSTANT character_e, 65
 000                                 CONSTANT character_f, 66
 000                                 CONSTANT character_g, 67
 000                                 CONSTANT character_h, 68
 000                                 CONSTANT character_i, 69
 000                                 CONSTANT character_j, 6A
 000                                 CONSTANT character_k, 6B
 000                                 CONSTANT character_l, 6C
 000                                 CONSTANT character_m, 6D
 000                                 CONSTANT character_n, 6E
 000                                 CONSTANT character_o, 6F
 000                                 CONSTANT character_p, 70
 000                                 CONSTANT character_q, 71
 000                                 CONSTANT character_r, 72
 000                                 CONSTANT character_s, 73
 000                                 CONSTANT character_t, 74
 000                                 CONSTANT character_u, 75
 000                                 CONSTANT character_v, 76
 000                                 CONSTANT character_w, 77
 000                                 CONSTANT character_x, 78
 000                                 CONSTANT character_y, 79
 000                                 CONSTANT character_z, 7A
 000                                 CONSTANT character_A, 41
 000                                 CONSTANT character_B, 42
 000                                 CONSTANT character_C, 43
 000                                 CONSTANT character_D, 44
 000                                 CONSTANT character_E, 45
 000                                 CONSTANT character_F, 46
 000                                 CONSTANT character_G, 47
 000                                 CONSTANT character_H, 48
 000                                 CONSTANT character_I, 49
 000                                 CONSTANT character_J, 4A
 000                                 CONSTANT character_K, 4B
 000                                 CONSTANT character_L, 4C
 000                                 CONSTANT character_M, 4D
 000                                 CONSTANT character_N, 4E
 000                                 CONSTANT character_O, 4F
 000                                 CONSTANT character_P, 50
 000                                 CONSTANT character_Q, 51
 000                                 CONSTANT character_R, 52
 000                                 CONSTANT character_S, 53
 000                                 CONSTANT character_T, 54
 000                                 CONSTANT character_U, 55
 000                                 CONSTANT character_V, 56
 000                                 CONSTANT character_W, 57
 000                                 CONSTANT character_X, 58
 000                                 CONSTANT character_Y, 59
 000                                 CONSTANT character_Z, 5A
 000                                 CONSTANT character_0, 30
 000                                 CONSTANT character_1, 31
 000                                 CONSTANT character_2, 32
 000                                 CONSTANT character_3, 33
 000                                 CONSTANT character_4, 34
 000                                 CONSTANT character_5, 35
 000                                 CONSTANT character_6, 36
 000                                 CONSTANT character_7, 37
 000                                 CONSTANT character_8, 38
 000                                 CONSTANT character_9, 39
 000                                 CONSTANT character_colon, 3A
 000                                 CONSTANT character_stop, 2E
 000                                 CONSTANT character_semi_colon, 3B
 000                                 CONSTANT character_minus, 2D
 000                                 CONSTANT character_divide, 2F        ;'/'
 000                                 CONSTANT character_plus, 2B
 000                                 CONSTANT character_comma, 2C
 000                                 CONSTANT character_less_than, 3C
 000                                 CONSTANT character_greater_than, 3E
 000                                 CONSTANT character_equals, 3D
 000                                 CONSTANT character_space, 20
 000                                 CONSTANT character_CR, 0D            ;carriage return
 000                                 CONSTANT character_question, 3F      ;'?'
 000                                 CONSTANT character_dollar, 24
 000                                 CONSTANT character_exclaim, 21       ;'!'
 000                                 CONSTANT character_BS, 08            ;Back Space command character
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Initialise the system
 000                                 ;**************************************************************************************
 000                                 ;
 000  00001              cold_start: LOAD s0, 01                          ;clear 1 second counter and set first LED
 001  2E004                          STORE s0, LED_pattern[04]
 002  2C080                          OUTPUT s0, LED_port[80]
 003  00F00                          LOAD sF, 00                          ;set "down" register to 0.
 004                                 ;
 004  3C001                          ENABLE INTERRUPT                     ;enable one second heart beat
 005                                 ;**************************************************************************************
 005                                 ; Main program
 005                                 ;**************************************************************************************
 005                                 ;
 005                                 ; Display welcome message for design
 005                                 ;
 005  3004C            main_program: CALL delay_1s[04C]                   ;
 006  04000          check_switches: INPUT s0, DATA_IN_PORT[00]           ;get status of switches
 007  12001                          TEST s0, 01                          ;test to see if switch 0 is 1
 008  35412                          JUMP NZ, just_clear_the_display[012] ;if switch 0 is 1, display
 009                                 ;if the switches are not 0, then shift the display left
 009  12002                          TEST s0, 02                          ;if switch1 is 1, call add, otherwise, subtract.
 00A  3540D                          JUMP NZ, call_sub[00D]
 00B  30017                call_add: CALL add_1_to_counter[017]
 00C  3400E                          JUMP display_the_counter[00E]
 00D  3001B                call_sub: CALL sub_1_to_counter[01B]
 00E  3001F     display_the_counter: CALL update_seven_segments[01F]
 00F  30047                          CALL delay_100ms[047]                ; change to 200ms delay
 010  30047                          CALL delay_100ms[047]
 011  34006                          JUMP check_switches[006]             ;
 012  00800  just_clear_the_display: LOAD s8, 00                          ;
 013  00900                          LOAD s9, 00                          ;
 014  00A00                          LOAD sA, 00                          ;
 015  3001F                          CALL update_seven_segments[01F]
 016  34005                          JUMP main_program[005]               ;
 017  18801        add_1_to_counter: ADD s8, 01
 018  1A900                          ADDCY s9, 00
 019  1AA00                          ADDCY sA, 00
 01A  2A000                          RETURN
 01B  1C801        sub_1_to_counter: SUB s8, 01
 01C  1E900                          SUBCY s9, 00
 01D  1EA00                          SUBCY sA, 00
 01E  2A000                          RETURN
 01F  2C840   update_seven_segments: OUTPUT s8, SSEG_PORT0[40]
 020  2C920                          OUTPUT s9, SSEG_PORT1[20]
 021  2CA10                          OUTPUT sA, SSEG_PORT2[10]
 022  2A000                          RETURN
 023                                 ;**************************************************************************************
 023                                 ; Routines to display hexadecimal values
 023                                 ;**************************************************************************************
 023                                 ;
 023                                 ;
 023                                 ; Convert hexadecimal value provided in register s0 into ASCII characters
 023                                 ;
 023                                 ; The value provided must can be any value in the range 00 to FF and will be converted into
 023                                 ; two ASCII characters.
 023                                 ;     The upper nibble will be represented by an ASCII character returned in register s3.
 023                                 ;     The lower nibble will be represented by an ASCII character returned in register s2.
 023                                 ;
 023                                 ; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
 023                                 ; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
 023                                 ; hexadecimal requiring a further addition of 07 to the 30 already added.
 023                                 ;
 023                                 ; Registers used s0, s2 and s3.
 023                                 ;
 023  01200       hex_byte_to_ASCII: LOAD s2, s0                          ;remember value supplied
 024  2000E                          SR0 s0                               ;isolate upper nibble
 025  2000E                          SR0 s0
 026  2000E                          SR0 s0
 027  2000E                          SR0 s0
 028  3002F                          CALL hex_to_ASCII[02F]               ;convert
 029  01300                          LOAD s3, s0                          ;upper nibble value in s3
 02A  01020                          LOAD s0, s2                          ;restore complete value
 02B  0A00F                          AND s0, 0F                           ;isolate lower nibble
 02C  3002F                          CALL hex_to_ASCII[02F]               ;convert
 02D  01200                          LOAD s2, s0                          ;lower nibble value in s2
 02E  2A000                          RETURN
 02F                                 ;
 02F                                 ; Convert hexadecimal value provided in register s0 into ASCII character
 02F                                 ;
 02F                                 ;Register used s0
 02F                                 ;
 02F  1C00A            hex_to_ASCII: SUB s0, 0A                           ;test if value is in range 0 to 9
 030  35832                          JUMP C, number_char[032]
 031  18007                          ADD s0, 07                           ;ASCII char A to F in range 41 to 46
 032  1803A             number_char: ADD s0, 3A                           ;ASCII char 0 to 9 in range 30 to 40
 033  2A000                          RETURN
 034                                 ;**************************************************************************************
 034                                 ; Software delay routines
 034                                 ;**************************************************************************************
 034                                 ;
 034                                 ; Delay of 1us.
 034                                 ;
 034                                 ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 034                                 ; instruction executes in 2 clock cycles making the calculation highly predictable.
 034                                 ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 034                                 ; in the initiating code. Interrupts may effect software derived delays.
 034                                 ;
 034                                 ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 034                                 ;
 034                                 ; Registers used s0
 034                                 ;
 034  0000B               delay_1us: LOAD s0, delay_1us_constant[0B]
 035  1C001                wait_1us: SUB s0, 01
 036  35435                          JUMP NZ, wait_1us[035]
 037  2A000                          RETURN
 038                                 ;
 038                                 ; Delay of 40us.
 038                                 ;
 038                                 ; Registers used s0, s1
 038                                 ;
 038  00128              delay_40us: LOAD s1, 28                          ;40 x 1us = 40us
 039  30034               wait_40us: CALL delay_1us[034]
 03A  1C101                          SUB s1, 01
 03B  35439                          JUMP NZ, wait_40us[039]
 03C  2A000                          RETURN
 03D                                 ;
 03D                                 ;
 03D                                 ; Delay of 1ms.
 03D                                 ;
 03D                                 ; Registers used s0, s1, s2
 03D                                 ;
 03D  00219               delay_1ms: LOAD s2, 19                          ;25 x 40us = 1ms
 03E  30038                wait_1ms: CALL delay_40us[038]
 03F  1C201                          SUB s2, 01
 040  3543E                          JUMP NZ, wait_1ms[03E]
 041  2A000                          RETURN
 042                                 ;
 042                                 ; Delay of 20ms.
 042                                 ;
 042                                 ; Delay of 20ms used during initialisation.
 042                                 ;
 042                                 ; Registers used s0, s1, s2, s3
 042                                 ;
 042  00314              delay_20ms: LOAD s3, 14                          ;20 x 1ms = 20ms
 043  3003D               wait_20ms: CALL delay_1ms[03D]
 044  1C301                          SUB s3, 01
 045  35443                          JUMP NZ, wait_20ms[043]
 046  2A000                          RETURN
 047  00364             delay_100ms: LOAD s3, 64                          ;100 x 1ms = 20ms
 048  3003D              wait_100ms: CALL delay_1ms[03D]
 049  1C301                          SUB s3, 01
 04A  35448                          JUMP NZ, wait_100ms[048]
 04B  2A000                          RETURN
 04C                                 ;
 04C                                 ; Delay of approximately 1 second.
 04C                                 ;
 04C                                 ; Registers used s0, s1, s2, s3, s4
 04C                                 ;
 04C  00432                delay_1s: LOAD s4, 32                          ;50 x 20ms = 1000ms
 04D  30042                 wait_1s: CALL delay_20ms[042]
 04E  1C401                          SUB s4, 01
 04F  3544D                          JUMP NZ, wait_1s[04D]
 050  2A000                          RETURN
 051                                 ;
 051                                 ;
 051                                 ;
 051                                 ;**************************************************************************************
 051                                 ; Interrupt Service Routine (ISR)
 051                                 ;**************************************************************************************
 051                                 ;
 051                                 ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 051                                 ; on the 8 LEDs.
 051                                 ;
 051  2E000                     ISR: STORE s0, ISR_preserve_s0[00]        ;preserve register
 052  06004                          FETCH s0, LED_pattern[04]            ;read current counter value
 053  12001                test_bot: TEST s0, 01                          ;if bottom, reverse direction
 054  35458                          JUMP NZ, go_up[058]
 055  12080                test_top: TEST s0, 80
 056  3545A                          JUMP NZ, go_down[05A]
 057  3405B                          JUMP shift[05B]
 058  00F00                   go_up: LOAD sF, 00
 059  3405B                          JUMP shift[05B]
 05A  00F01                 go_down: LOAD sF, 01
 05B  12F01                   shift: TEST sF, 01
 05C  3505F                          JUMP Z, shift_up[05F]
 05D  2000E              shift_down: SR0 s0
 05E  34060                          JUMP display_leds[060]
 05F  20006                shift_up: SL0 s0
 060  2E004            display_leds: STORE s0, LED_pattern[04]            ;store new counter value
 061  2C080                          OUTPUT s0, LED_port[80]              ;display counter value on LEDs
 062  06000                          FETCH s0, ISR_preserve_s0[00]        ;restore register
 063  38001                          RETURNI ENABLE
 064                                 ;
 064                                 ;
 064                                 ;**************************************************************************************
 064                                 ; Interrupt Vector
 064                                 ;**************************************************************************************
 064                                 ;
 3FF                                 ADDRESS 3FF
 3FF  34051                          JUMP ISR[051]
 3FF                                 ;
 3FF                                 ;
