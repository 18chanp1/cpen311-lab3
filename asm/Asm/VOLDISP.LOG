KCPSM3 Assembler log file for program 'voldisp.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
07Jun2023-11:46:18

 Addr Code

 000                          ; Port definitions
 000                          CONSTANT LED_port, 80
 000                          CONSTANT LED_accumulator_port, 90
 000                          CONSTANT DATA_IN_PORT, 00
 000                          ; Special Register Usage
 000                          ;None
 000                          ; Scratchpad memory locations
 000                          ;Preserve registers s0-s3, led pattern
 000                          CONSTANT ISR_preserve_sB, 00
 000                          CONSTANT ISR_preserve_sC, 01
 000                          CONSTANT ISR_preserve_sD, 02
 000                          CONSTANT ISR_preserve_sE, 03
 000                          CONSTANT COUNTER_256, 05
 000                          CONSTANT SUM0, 06
 000                          CONSTANT SUM1, 07
 000                          ; Constants
 000                          ;Clock constants
 000                          CONSTANT delay_1us_constant, 0B
 000                          ;Initialize System
 000  00A01       cold_start: LOAD sA, 01
 001  00BFF                   LOAD sB, FF
 002  00C00                   LOAD sC, 00
 003  2EB05                   STORE sB, COUNTER_256[05]           ;initialize to FF, so overflows and outputs 0 right away
 004  2EC06                   STORE sC, SUM0[06]                  ;initialize to 0
 005  2EC07                   STORE sC, SUM1[07]
 006  2CA80                   OUTPUT sA, LED_port[80]             ;turn on LED
 007  2CB90                   OUTPUT sB, LED_accumulator_port[90] ;set accumulator display to 00
 008  3C001                   ENABLE INTERRUPT
 009                          ; Main Program
 009  30029     main_program: CALL delay_1s[029]
 00A  14A01                   COMPARE sA, 01
 00B  3540E                   JUMP NZ, add[00E]
 00C  1CA01         subtract: SUB sA, 01                          ;sA == 01
 00D  3400F                   JUMP set_led[00F]
 00E  18A01              add: ADD sA, 01                          ;sA != 01
 00F  2CA80          set_led: OUTPUT sA, LED_port[80]
 010  34009                   JUMP main_program[009]
 011                          ; Routines for software delays, borrowed from in-class activity
 011  0000B        delay_1us: LOAD s0, delay_1us_constant[0B]
 012  1C001         wait_1us: SUB s0, 01
 013  35412                   JUMP NZ, wait_1us[012]
 014  2A000                   RETURN
 015                          ;
 015                          ; Delay of 40us.
 015                          ;
 015                          ; Registers used s0, s1
 015                          ;
 015  00128       delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 016  30011        wait_40us: CALL delay_1us[011]
 017  1C101                   SUB s1, 01
 018  35416                   JUMP NZ, wait_40us[016]
 019  2A000                   RETURN
 01A                          ;
 01A                          ;
 01A                          ; Delay of 1ms.
 01A                          ;
 01A                          ; Registers used s0, s1, s2
 01A                          ;
 01A  00219        delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 01B  30015         wait_1ms: CALL delay_40us[015]
 01C  1C201                   SUB s2, 01
 01D  3541B                   JUMP NZ, wait_1ms[01B]
 01E  2A000                   RETURN
 01F                          ;
 01F                          ; Delay of 20ms.
 01F                          ;
 01F                          ; Delay of 20ms used during initialisation.
 01F                          ;
 01F                          ; Registers used s0, s1, s2, s3
 01F                          ;
 01F  00314       delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 020  3001A        wait_20ms: CALL delay_1ms[01A]
 021  1C301                   SUB s3, 01
 022  35420                   JUMP NZ, wait_20ms[020]
 023  2A000                   RETURN
 024  00364      delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
 025  3001A       wait_100ms: CALL delay_1ms[01A]
 026  1C301                   SUB s3, 01
 027  35425                   JUMP NZ, wait_100ms[025]
 028  2A000                   RETURN
 029                          ;
 029                          ; Delay of approximately 1 second.
 029                          ;
 029                          ; Registers used s0, s1, s2, s3, s4
 029                          ;
 029  00432         delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 02A  3001F          wait_1s: CALL delay_20ms[01F]
 02B  1C401                   SUB s4, 01
 02C  3542A                   JUMP NZ, wait_1s[02A]
 02D  2A000                   RETURN
 02E                          ;ISR Routine
 02E  2EB00              ISR: STORE sB, ISR_preserve_sB[00]
 02F  2EC01                   STORE sC, ISR_preserve_sC[01]
 030  2ED02                   STORE sD, ISR_preserve_sD[02]
 031  2EE03                   STORE sE, ISR_preserve_sE[03]
 032  06B05                   FETCH sB, COUNTER_256[05]
 033  06C06                   FETCH sC, SUM0[06]
 034  06D07                   FETCH sD, SUM1[07]
 035  18B01                   ADD sB, 01                          ;increment counter
 036  35C3F                   JUMP NC, accumulator_add[03F]       ;when overflow, is 256
 037  00EFF                   LOAD sE, FF
 038  20D06       shift_left: SL0 sD                              ;loop until all bits shifted away
 039  3583C                   JUMP C, output_sum[03C]
 03A  20E06                   SL0 sE
 03B  35438                   JUMP NZ, shift_left[038]
 03C  2CE90       output_sum: OUTPUT sE, LED_accumulator_port[90] ;if overflow, output and rst accumulator
 03D  00C00                   LOAD sC, 00
 03E  00D00                   LOAD sD, 00
 03F  04E00  accumulator_add: INPUT sE, DATA_IN_PORT[00]
 040  1BCE0                   ADDCY sC, sE
 041  1AD00                   ADDCY sD, 00
 042  2EB05          end_isr: STORE sB, COUNTER_256[05]
 043  2EC06                   STORE sC, SUM0[06]
 044  2ED07                   STORE sD, SUM1[07]
 045  06B00                   FETCH sB, ISR_preserve_sB[00]       ;restore registers
 046  06C01                   FETCH sC, ISR_preserve_sC[01]
 047  06D02                   FETCH sD, ISR_preserve_sD[02]
 048  06E03                   FETCH sE, ISR_preserve_sE[03]
 049  38001                   RETURNI ENABLE
 04A                          ;Interrupt Vector
 3FF                          ADDRESS 3FF
 3FF  3402E                   JUMP ISR[02E]
