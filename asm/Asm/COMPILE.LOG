KCPSM3  v1.30.      Ken Chapman (Xilinx-UK) 2005

The assembler for KCPSM3 Programmable State Machine

PASS 1 - Reading input PSM file

; Port definitions
CONSTANT LED_port, 80
CONSTANT LED_accumulator_port, 90
CONSTANT DATA_IN_PORT, 00
; Special Register Usage
;None
; Scratchpad memory locations
;Preserve registers s0-s3, led pattern
CONSTANT ISR_preserve_sB, 00
CONSTANT ISR_preserve_sC, 01
CONSTANT ISR_preserve_sD, 02
CONSTANT ISR_preserve_sE, 03
CONSTANT COUNTER_256, 05
CONSTANT SUM0, 06
CONSTANT SUM1, 07
; Constants
;Clock constants
CONSTANT delay_1us_constant, 0B
;Initialize System
cold_start:     LOAD sA, 01
LOAD sB, FF
LOAD sC, 00
STORE sB, COUNTER_256               ;initialize to FF, so overflows and outputs 0 right away
STORE sC, SUM0              ;initialize to 0
STORE sC, SUM1
OUTPUT sA, LED_port                 ;turn on LED
OUTPUT sB, LED_accumulator_port     ;set accumulator display to 00
ENABLE INTERRUPT
; Main Program
main_program:   CALL delay_1s
COMPARE sA, 01
JUMP NZ, add
subtract:   SUB sA, 01              ;sA == 01
JUMP set_led
add:   ADD sA, 01              ;sA != 01
set_led:   OUTPUT sA, LED_port
JUMP main_program
; Routines for software delays, borrowed from in-class activity
delay_1us: LOAD s0, delay_1us_constant
wait_1us: SUB s0, 01
JUMP NZ, wait_1us
RETURN
;
; Delay of 40us.
;
; Registers used s0, s1
;
delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
wait_40us: CALL delay_1us
SUB s1, 01
JUMP NZ, wait_40us
RETURN
;
;
; Delay of 1ms.
;
; Registers used s0, s1, s2
;
delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
wait_1ms: CALL delay_40us
SUB s2, 01
JUMP NZ, wait_1ms
RETURN
;
; Delay of 20ms.
;
; Delay of 20ms used during initialisation.
;
; Registers used s0, s1, s2, s3
;
delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
wait_20ms: CALL delay_1ms
SUB s3, 01
JUMP NZ, wait_20ms
RETURN
delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
wait_100ms: CALL delay_1ms
SUB s3, 01
JUMP NZ, wait_100ms
RETURN
;
; Delay of approximately 1 second.
;
; Registers used s0, s1, s2, s3, s4
;
delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
wait_1s: CALL delay_20ms
SUB s4, 01
JUMP NZ, wait_1s
RETURN
;ISR Routine
ISR:    STORE sB, ISR_preserve_sB
STORE sC, ISR_preserve_sC
STORE sD, ISR_preserve_sD
STORE sE, ISR_preserve_sE
FETCH sB, COUNTER_256
FETCH sC, SUM0
FETCH sD, SUM1
ADD sB, 01                           ;increment counter
JUMP NC, accumulator_add            ;when overflow, is 256
LOAD sE, FF
shift_left: SL0 sD                               ;loop until all bits shifted away
JUMP C, output_sum
SL0 sE
JUMP NZ, shift_left
output_sum: OUTPUT sE, LED_accumulator_port     ;if overflow, output and rst accumulator
LOAD sC, 00
LOAD sD, 00
accumulator_add:INPUT sE, DATA_IN_PORT
ADDCY sC, sE
ADDCY sD, 00
end_isr:    STORE sB, COUNTER_256
STORE sC, SUM0
STORE sD, SUM1
FETCH sB, ISR_preserve_sB           ;restore registers
FETCH sC, ISR_preserve_sC
FETCH sD, ISR_preserve_sD
FETCH sE, ISR_preserve_sE
RETURNI ENABLE
;Interrupt Vector
ADDRESS 3FF
JUMP ISR

PASS 2 - Testing Instructions

; Port definitions
CONSTANT LED_port, 80
CONSTANT LED_accumulator_port, 90
CONSTANT DATA_IN_PORT, 00
; Special Register Usage
;None
; Scratchpad memory locations
;Preserve registers s0-s3, led pattern
CONSTANT ISR_preserve_sB, 00
CONSTANT ISR_preserve_sC, 01
CONSTANT ISR_preserve_sD, 02
CONSTANT ISR_preserve_sE, 03
CONSTANT COUNTER_256, 05
CONSTANT SUM0, 06
CONSTANT SUM1, 07
; Constants
;Clock constants
CONSTANT delay_1us_constant, 0B
;Initialize System
cold_start: LOAD sA, 01
LOAD sB, FF
LOAD sC, 00
STORE sB, COUNTER_256;initialize to FF, so overflows and outputs 0 right away
STORE sC, SUM0;initialize to 0
STORE sC, SUM1
OUTPUT sA, LED_port;turn on LED
OUTPUT sB, LED_accumulator_port;set accumulator display to 00
ENABLE INTERRUPT
; Main Program
main_program: CALL delay_1s
COMPARE sA, 01
JUMP NZ, add
subtract: SUB sA, 01;sA == 01
JUMP set_led
add: ADD sA, 01;sA != 01
set_led: OUTPUT sA, LED_port
JUMP main_program
; Routines for software delays, borrowed from in-class activity
delay_1us: LOAD s0, delay_1us_constant
wait_1us: SUB s0, 01
JUMP NZ, wait_1us
RETURN
;
; Delay of 40us.
;
; Registers used s0, s1
;
delay_40us: LOAD s1, 28;40 x 1us = 40us
wait_40us: CALL delay_1us
SUB s1, 01
JUMP NZ, wait_40us
RETURN
;
;
; Delay of 1ms.
;
; Registers used s0, s1, s2
;
delay_1ms: LOAD s2, 19;25 x 40us = 1ms
wait_1ms: CALL delay_40us
SUB s2, 01
JUMP NZ, wait_1ms
RETURN
;
; Delay of 20ms.
;
; Delay of 20ms used during initialisation.
;
; Registers used s0, s1, s2, s3
;
delay_20ms: LOAD s3, 14;20 x 1ms = 20ms
wait_20ms: CALL delay_1ms
SUB s3, 01
JUMP NZ, wait_20ms
RETURN
delay_100ms: LOAD s3, 64;100 x 1ms = 20ms
wait_100ms: CALL delay_1ms
SUB s3, 01
JUMP NZ, wait_100ms
RETURN
;
; Delay of approximately 1 second.
;
; Registers used s0, s1, s2, s3, s4
;
delay_1s: LOAD s4, 32;50 x 20ms = 1000ms
wait_1s: CALL delay_20ms
SUB s4, 01
JUMP NZ, wait_1s
RETURN
;ISR Routine
ISR: STORE sB, ISR_preserve_sB
STORE sC, ISR_preserve_sC
STORE sD, ISR_preserve_sD
STORE sE, ISR_preserve_sE
FETCH sB, COUNTER_256
FETCH sC, SUM0
FETCH sD, SUM1
ADD sB, 01;increment counter
JUMP NC, accumulator_add;when overflow, is 256
LOAD sE, FF
shift_left: SL0 sD;loop until all bits shifted away
JUMP C, output_sum
SL0 sE
JUMP NZ, shift_left
output_sum: OUTPUT sE, LED_accumulator_port;if overflow, output and rst accumulator
LOAD sC, 00
LOAD sD, 00
accumulator_add: INPUT sE, DATA_IN_PORT
ADDCY sC, sE
ADDCY sD, 00
end_isr: STORE sB, COUNTER_256
STORE sC, SUM0
STORE sD, SUM1
FETCH sB, ISR_preserve_sB;restore registers
FETCH sC, ISR_preserve_sC
FETCH sD, ISR_preserve_sD
FETCH sE, ISR_preserve_sE
RETURNI ENABLE
;Interrupt Vector
ADDRESS 3FF
JUMP ISR

PASS 3 - Resolving addresses and line labels

000 ; Port definitions
000 CONSTANT LED_port, 80
000 CONSTANT LED_accumulator_port, 90
000 CONSTANT DATA_IN_PORT, 00
000 ; Special Register Usage
000 ;None
000 ; Scratchpad memory locations
000 ;Preserve registers s0-s3, led pattern
000 CONSTANT ISR_preserve_sB, 00
000 CONSTANT ISR_preserve_sC, 01
000 CONSTANT ISR_preserve_sD, 02
000 CONSTANT ISR_preserve_sE, 03
000 CONSTANT COUNTER_256, 05
000 CONSTANT SUM0, 06
000 CONSTANT SUM1, 07
000 ; Constants
000 ;Clock constants
000 CONSTANT delay_1us_constant, 0B
000 ;Initialize System
000 cold_start: LOAD sA, 01
001 LOAD sB, FF
002 LOAD sC, 00
003 
STORE sB, COUNTER_256;initialize to FF, so overflows and outputs 0 right away
004 STORE sC, SUM0;initialize to 0
005 STORE sC, SUM1
006 OUTPUT sA, LED_port;turn on LED
007 OUTPUT sB, LED_accumulator_port;set accumulator display to 00
008 ENABLE INTERRUPT
009 ; Main Program
009 main_program: CALL delay_1s
00A COMPARE sA, 01
00B JUMP NZ, add
00C subtract: SUB sA, 01;sA == 01
00D JUMP set_led
00E add: ADD sA, 01;sA != 01
00F set_led: OUTPUT sA, LED_port
010 JUMP main_program
011 ; Routines for software delays, borrowed from in-class activity
011 delay_1us: LOAD s0, delay_1us_constant
012 wait_1us: SUB s0, 01
013 JUMP NZ, wait_1us
014 RETURN
015 ;
015 ; Delay of 40us.
015 ;
015 ; Registers used s0, s1
015 ;
015 delay_40us: LOAD s1, 28;40 x 1us = 40us
016 wait_40us: CALL delay_1us
017 SUB s1, 01
018 JUMP NZ, wait_40us
019 RETURN
01A ;
01A ;
01A ; Delay of 1ms.
01A ;
01A ; Registers used s0, s1, s2
01A ;
01A delay_1ms: LOAD s2, 19;25 x 40us = 1ms
01B wait_1ms: CALL delay_40us
01C SUB s2, 01
01D JUMP NZ, wait_1ms
01E RETURN
01F ;
01F ; Delay of 20ms.
01F ;
01F ; Delay of 20ms used during initialisation.
01F ;
01F ; Registers used s0, s1, s2, s3
01F ;
01F delay_20ms: LOAD s3, 14;20 x 1ms = 20ms
020 wait_20ms: CALL delay_1ms
021 SUB s3, 01
022 JUMP NZ, wait_20ms
023 RETURN
024 delay_100ms: LOAD s3, 64;100 x 1ms = 20ms
025 wait_100ms: CALL delay_1ms
026 SUB s3, 01
027 JUMP NZ, wait_100ms
028 RETURN
029 ;
029 ; Delay of approximately 1 second.
029 ;
029 ; Registers used s0, s1, s2, s3, s4
029 ;
029 delay_1s: LOAD s4, 32;50 x 20ms = 1000ms
02A wait_1s: CALL delay_20ms
02B SUB s4, 01
02C JUMP NZ, wait_1s
02D RETURN
02E ;ISR Routine
02E ISR: STORE sB, ISR_preserve_sB
02F STORE sC, ISR_preserve_sC
030 STORE sD, ISR_preserve_sD
031 STORE sE, ISR_preserve_sE
032 FETCH sB, COUNTER_256
033 FETCH sC, SUM0
034 FETCH sD, SUM1
035 ADD sB, 01;increment counter
036 JUMP NC, accumulator_add;when overflow, is 256
037 LOAD sE, FF
038 shift_left: SL0 sD;loop until all bits shifted away
039 JUMP C, output_sum
03A SL0 sE
03B JUMP NZ, shift_left
03C 
output_sum: OUTPUT sE, LED_accumulator_port;if overflow, output and rst accumulator
03D LOAD sC, 00
03E LOAD sD, 00
03F accumulator_add: INPUT sE, DATA_IN_PORT
040 ADDCY sC, sE
041 ADDCY sD, 00
042 end_isr: STORE sB, COUNTER_256
043 STORE sC, SUM0
044 STORE sD, SUM1
045 FETCH sB, ISR_preserve_sB;restore registers
046 FETCH sC, ISR_preserve_sC
047 FETCH sD, ISR_preserve_sD
048 FETCH sE, ISR_preserve_sE
049 RETURNI ENABLE
04A ;Interrupt Vector
04A ADDRESS 3FF
3FF JUMP ISR

PASS 4 - Resolving Operands

000 ; Port definitions
000 CONSTANT LED_port, 80
000 CONSTANT LED_accumulator_port, 90
000 CONSTANT DATA_IN_PORT, 00
000 ; Special Register Usage
000 ;None
000 ; Scratchpad memory locations
000 ;Preserve registers s0-s3, led pattern
000 CONSTANT ISR_preserve_sB, 00
000 CONSTANT ISR_preserve_sC, 01
000 CONSTANT ISR_preserve_sD, 02
000 CONSTANT ISR_preserve_sE, 03
000 CONSTANT COUNTER_256, 05
000 CONSTANT SUM0, 06
000 CONSTANT SUM1, 07
000 ; Constants
000 ;Clock constants
000 CONSTANT delay_1us_constant, 0B
000 ;Initialize System
000 cold_start: LOAD sA, 01
001 LOAD sB, FF
002 LOAD sC, 00
003 
STORE sB, COUNTER_256;initialize to FF, so overflows and outputs 0 right away
004 STORE sC, SUM0;initialize to 0
005 STORE sC, SUM1
006 OUTPUT sA, LED_port;turn on LED
007 OUTPUT sB, LED_accumulator_port;set accumulator display to 00
008 ENABLE INTERRUPT
009 ; Main Program
009 main_program: CALL delay_1s
00A COMPARE sA, 01
00B JUMP NZ, add
00C subtract: SUB sA, 01;sA == 01
00D JUMP set_led
00E add: ADD sA, 01;sA != 01
00F set_led: OUTPUT sA, LED_port
010 JUMP main_program
011 ; Routines for software delays, borrowed from in-class activity
011 delay_1us: LOAD s0, delay_1us_constant
012 wait_1us: SUB s0, 01
013 JUMP NZ, wait_1us
014 RETURN
015 ;
015 ; Delay of 40us.
015 ;
015 ; Registers used s0, s1
015 ;
015 delay_40us: LOAD s1, 28;40 x 1us = 40us
016 wait_40us: CALL delay_1us
017 SUB s1, 01
018 JUMP NZ, wait_40us
019 RETURN
01A ;
01A ;
01A ; Delay of 1ms.
01A ;
01A ; Registers used s0, s1, s2
01A ;
01A delay_1ms: LOAD s2, 19;25 x 40us = 1ms
01B wait_1ms: CALL delay_40us
01C SUB s2, 01
01D JUMP NZ, wait_1ms
01E RETURN
01F ;
01F ; Delay of 20ms.
01F ;
01F ; Delay of 20ms used during initialisation.
01F ;
01F ; Registers used s0, s1, s2, s3
01F ;
01F delay_20ms: LOAD s3, 14;20 x 1ms = 20ms
020 wait_20ms: CALL delay_1ms
021 SUB s3, 01
022 JUMP NZ, wait_20ms
023 RETURN
024 delay_100ms: LOAD s3, 64;100 x 1ms = 20ms
025 wait_100ms: CALL delay_1ms
026 SUB s3, 01
027 JUMP NZ, wait_100ms
028 RETURN
029 ;
029 ; Delay of approximately 1 second.
029 ;
029 ; Registers used s0, s1, s2, s3, s4
029 ;
029 delay_1s: LOAD s4, 32;50 x 20ms = 1000ms
02A wait_1s: CALL delay_20ms
02B SUB s4, 01
02C JUMP NZ, wait_1s
02D RETURN
02E ;ISR Routine
02E ISR: STORE sB, ISR_preserve_sB
02F STORE sC, ISR_preserve_sC
030 STORE sD, ISR_preserve_sD
031 STORE sE, ISR_preserve_sE
032 FETCH sB, COUNTER_256
033 FETCH sC, SUM0
034 FETCH sD, SUM1
035 ADD sB, 01;increment counter
036 JUMP NC, accumulator_add;when overflow, is 256
037 LOAD sE, FF
038 shift_left: SL0 sD;loop until all bits shifted away
039 JUMP C, output_sum
03A SL0 sE
03B JUMP NZ, shift_left
03C 
output_sum: OUTPUT sE, LED_accumulator_port;if overflow, output and rst accumulator
03D LOAD sC, 00
03E LOAD sD, 00
03F accumulator_add: INPUT sE, DATA_IN_PORT
040 ADDCY sC, sE
041 ADDCY sD, 00
042 end_isr: STORE sB, COUNTER_256
043 STORE sC, SUM0
044 STORE sD, SUM1
045 FETCH sB, ISR_preserve_sB;restore registers
046 FETCH sC, ISR_preserve_sC
047 FETCH sD, ISR_preserve_sD
048 FETCH sE, ISR_preserve_sE
049 RETURNI ENABLE
04A ;Interrupt Vector
3FF ADDRESS 3FF
3FF JUMP ISR

PASS 5 - Writing reformatted PSM file
           voldisp.fmt

PASS 6 - Writing assembler log file
           voldisp.log

PASS 7 - Writing coefficient file
           voldisp.coe

PASS 8 - Writing VHDL memory definition file
           voldisp.vhd

PASS 9 - Writing Verilog memory definition file
           voldisp.v

PASS 10 - Writing System Generator memory definition file
           voldisp.m

PASS 11 - Writing memory definition files
           voldisp.hex
           voldisp.dec
           voldisp.mem


KCPSM3 successful.

KCPSM3 complete.

